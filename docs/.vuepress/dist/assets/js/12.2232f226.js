(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{377:function(t,s,a){"use strict";a.r(s);var n=a(44),p=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"플로이드알고리즘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#플로이드알고리즘"}},[t._v("#")]),t._v(" 플로이드알고리즘")]),t._v(" "),a("blockquote",[a("p",[t._v("모든 정점쌍에 대해 최단거리를 구하고 싶다면 플로이드 알고리즘을 사용하면 됩니다.")])]),t._v(" "),a("blockquote",[a("p",[t._v("플로이드 알고리즘은 모든 정점 쌍의 최단거리를 저장하는 2차원 배열 dist[][]를 계산합니다.\ndist[v][u]는 u에서 v로 가는 최단거리를 나타냅니다")])]),t._v(" "),a("h2",{attrs:{id:"경로와-경유점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#경로와-경유점"}},[t._v("#")]),t._v(" 경로와 경유점")]),t._v(" "),a("ol",[a("li",[t._v("두 정점 u,v를 잇는 경로가 있습니다. 이 경로는 시작점 u와 끝잠 v을 지납니다")]),t._v(" "),a("li",[t._v("이와 같이 경로를 거쳐가는 정점을 경유점이라고 합니다.")]),t._v(" "),a("li",[t._v("정점 집합 S에 포함된 정점만으 경유점으로 사용해 u에서 v로 가는 최단 경로를 알고 있습니다.")]),t._v(" "),a("li",[t._v("S 중 하나의 정점을 x라고 할 때 최단 경로는 x를 경유할 수도, 경유하지 않을 수 도 있습니다.")])]),t._v(" "),a("p",[t._v("각 경우 최단경로는 어떤 형태를 가질까요?\n첫번째. 경로가 x를 경유하지 않는다. 이 경우에는 S-{x}에 포함된 정점들만 경유점으로 사용합니다.\n두번째. 경로가 x를 경유한다. 이경우 경로를 u에서 x로 가는 구간과, x에서 v로 가는 구간으로 나눌 수 있습니다.")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[t._v("이 부분 경로들은 x를 경유하지 않으며 S-{x}에 포함된 정점들만을 경유점으로 사용합니다")])]),t._v(" "),a("li",[a("p",[t._v("마지막으로 u에서 v로가는 최단 경로는 두 가지 중 가장 짧은 경로가 되겠지요")])])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nint V;\n\nint adj[MAC_V][MAX_V];\nint C[MAX_V][MAX_V][MAX_V];\n\nvoid allPairShortestPath(){\n    for(int i=0; i<V; i++)\n        for(int j=0; j<V; j++)\n            if(i!=j)\n                C[0][i][j] = min(adj[i][j], adj[i][0] + adj[0][j]);\n            else\n                C[0][i][j] = 0;\n\n    for(int k=1; k<V; k++)\n        for(int i=0; i<V; i++)\n            for(int j=0; j<V; j++)\n                C[k][i][j] = min(C[k-1][i][j], C[k-1][i][k] + C[k-1][k][j]);\n}\n")])])]),a("ol",[a("li",[t._v("C[k][i][j]는 k번까지의 경유점을 가진 경로에서 i에서 j까지 가는 최단거리입니다")]),t._v(" "),a("li",[t._v("C[0][i][i]는 항상 0으로 초기화 합니다. 자기 자신에게 가는 간선의 최단거리는 0이기 때문입니다.")]),t._v(" "),a("li",[t._v("두 정점사이의 간선이 없는 경우 아주 큰값을 넣어둬야 합니다. 이 값을 이용해 경로가 존재하지 않았음을 알아야 합니다.")])]),t._v(" "),a("blockquote",[a("p",[t._v("시간 복잡도는 O(V3)이 됩니다")])]),t._v(" "),a("h2",{attrs:{id:"메모리-사용량-줄이기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#메모리-사용량-줄이기"}},[t._v("#")]),t._v(" 메모리 사용량 줄이기")]),t._v(" "),a("blockquote",[a("p",[t._v("플로이드 알고리즘의 시간복잡도는 빠르지만 공간복잡도를 잡아먹습니다. 이러한 경우 슬라이딩 윈도우 기법을 이용하면 배열의 크기를 O(V2)로 줄일 수 잇습니다.")])]),t._v(" "),a("ol",[a("li",[t._v("Ck의 답은 Ck-1만 있으면 계산할 수 있기 때문에 Ck-2 Ck-3의 값을 가지고 있을 필요는 없습니다.")]),t._v(" "),a("li",[t._v("이 점을 이용하면 배열의 크기를 줄이 수 있습니다. Ck(u,v)값을 C[k%2][u][v]에 저장하면 되니까요")])]),t._v(" "),a("ul",[a("li",[t._v("Ck-1(u,k) : 시작점으로부터 k-1번 정점까지를 경유점으로 이용해 u에서 k로 가는 최단 경로의 길이")]),t._v(" "),a("li",[t._v("Ck(u,k) : 시작점으로부터 k번 ...")])]),t._v(" "),a("ol",[a("li",[t._v("도착점이 k번 정점일 때 사용가능한 경유점의 목록에 k번 정점을 추가하는 것은 아무런 의미가 없습니다.")]),t._v(" "),a("li",[t._v("따라서 Ck-1 Ck의 값을 구분하지 않고 사용할 수 있습니다.")]),t._v(" "),a("li",[t._v("C[k%2] C[(K-1)%2]를 구분할 필요가 없어 이들을 한개의 2차원 배열로 섞어 쓸수 있습니다")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" V"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAX_V"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("MAX_V"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floyd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("V"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("V"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" k"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("V"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("V"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" j"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" adj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=p.exports}}]);